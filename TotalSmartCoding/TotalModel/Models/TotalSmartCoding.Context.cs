//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TotalModel.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TotalSmartCodingEntities : DbContext
    {
        public TotalSmartCodingEntities()
            : base("name=TotalSmartCodingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Batch> Batches { get; set; }
        public virtual DbSet<BinLocation> BinLocations { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<FillingLine> FillingLines { get; set; }
        public virtual DbSet<GoodsReceiptType> GoodsReceiptTypes { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<ModuleDetail> ModuleDetails { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<OrganizationalUnit> OrganizationalUnits { get; set; }
        public virtual DbSet<OrganizationalUnitUser> OrganizationalUnitUsers { get; set; }
        public virtual DbSet<Territory> Territories { get; set; }
        public virtual DbSet<Commodity> Commodities { get; set; }
        public virtual DbSet<DeliveryAdviceDetail> DeliveryAdviceDetails { get; set; }
        public virtual DbSet<DeliveryAdvice> DeliveryAdvices { get; set; }
        public virtual DbSet<Warehouse> Warehouses { get; set; }
        public virtual DbSet<PickupDetail> PickupDetails { get; set; }
        public virtual DbSet<Pickup> Pickups { get; set; }
        public virtual DbSet<GoodsReceiptDetail> GoodsReceiptDetails { get; set; }
        public virtual DbSet<GoodsReceipt> GoodsReceipts { get; set; }
        public virtual DbSet<GoodsIssueDetail> GoodsIssueDetails { get; set; }
        public virtual DbSet<GoodsIssue> GoodsIssues { get; set; }
        public virtual DbSet<SalesOrderDetail> SalesOrderDetails { get; set; }
        public virtual DbSet<SalesOrder> SalesOrders { get; set; }
        public virtual DbSet<WarehouseAdjustmentType> WarehouseAdjustmentTypes { get; set; }
        public virtual DbSet<WarehouseAdjustment> WarehouseAdjustments { get; set; }
        public virtual DbSet<WarehouseAdjustmentDetail> WarehouseAdjustmentDetails { get; set; }
        public virtual DbSet<Carton> Cartons { get; set; }
        public virtual DbSet<Pack> Packs { get; set; }
        public virtual DbSet<Pallet> Pallets { get; set; }
    
        public virtual ObjectResult<Nullable<int>> GetAccessLevel(Nullable<int> userID, Nullable<int> nMVNTaskID, Nullable<int> organizationalUnitID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var organizationalUnitIDParameter = organizationalUnitID.HasValue ?
                new ObjectParameter("OrganizationalUnitID", organizationalUnitID) :
                new ObjectParameter("OrganizationalUnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetAccessLevel", userIDParameter, nMVNTaskIDParameter, organizationalUnitIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetApprovalPermitted(Nullable<int> userID, Nullable<int> nMVNTaskID, Nullable<int> organizationalUnitID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var organizationalUnitIDParameter = organizationalUnitID.HasValue ?
                new ObjectParameter("OrganizationalUnitID", organizationalUnitID) :
                new ObjectParameter("OrganizationalUnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetApprovalPermitted", userIDParameter, nMVNTaskIDParameter, organizationalUnitIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetShowDiscount(Nullable<int> userID, Nullable<int> nMVNTaskID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetShowDiscount", userIDParameter, nMVNTaskIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetUnApprovalPermitted(Nullable<int> userID, Nullable<int> nMVNTaskID, Nullable<int> organizationalUnitID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var organizationalUnitIDParameter = organizationalUnitID.HasValue ?
                new ObjectParameter("OrganizationalUnitID", organizationalUnitID) :
                new ObjectParameter("OrganizationalUnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetUnApprovalPermitted", userIDParameter, nMVNTaskIDParameter, organizationalUnitIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetUnVoidablePermitted(Nullable<int> userID, Nullable<int> nMVNTaskID, Nullable<int> organizationalUnitID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var organizationalUnitIDParameter = organizationalUnitID.HasValue ?
                new ObjectParameter("OrganizationalUnitID", organizationalUnitID) :
                new ObjectParameter("OrganizationalUnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetUnVoidablePermitted", userIDParameter, nMVNTaskIDParameter, organizationalUnitIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetVoidablePermitted(Nullable<int> userID, Nullable<int> nMVNTaskID, Nullable<int> organizationalUnitID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var organizationalUnitIDParameter = organizationalUnitID.HasValue ?
                new ObjectParameter("OrganizationalUnitID", organizationalUnitID) :
                new ObjectParameter("OrganizationalUnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetVoidablePermitted", userIDParameter, nMVNTaskIDParameter, organizationalUnitIDParameter);
        }
    
        public virtual ObjectResult<PendingPickupDetail> GetPendingPickupDetails(Nullable<int> locationID, Nullable<int> goodsReceiptID, Nullable<int> pickupID, Nullable<int> warehouseID, string pickupDetailIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var goodsReceiptIDParameter = goodsReceiptID.HasValue ?
                new ObjectParameter("GoodsReceiptID", goodsReceiptID) :
                new ObjectParameter("GoodsReceiptID", typeof(int));
    
            var pickupIDParameter = pickupID.HasValue ?
                new ObjectParameter("PickupID", pickupID) :
                new ObjectParameter("PickupID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var pickupDetailIDsParameter = pickupDetailIDs != null ?
                new ObjectParameter("PickupDetailIDs", pickupDetailIDs) :
                new ObjectParameter("PickupDetailIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingPickupDetail>("GetPendingPickupDetails", locationIDParameter, goodsReceiptIDParameter, pickupIDParameter, warehouseIDParameter, pickupDetailIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<string> GoodsReceiptApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GoodsReceiptApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> GoodsReceiptEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GoodsReceiptEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> GoodsReceiptPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GoodsReceiptPostSaveValidate", entityIDParameter);
        }
    
        public virtual int GoodsReceiptSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GoodsReceiptSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int GoodsReceiptToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GoodsReceiptToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<GoodsReceiptIndex> GetGoodsReceiptIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsReceiptIndex>("GetGoodsReceiptIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GoodsReceiptViewDetail> GetGoodsReceiptViewDetails(Nullable<int> goodsReceiptID)
        {
            var goodsReceiptIDParameter = goodsReceiptID.HasValue ?
                new ObjectParameter("GoodsReceiptID", goodsReceiptID) :
                new ObjectParameter("GoodsReceiptID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsReceiptViewDetail>("GetGoodsReceiptViewDetails", goodsReceiptIDParameter);
        }
    
        public virtual ObjectResult<PendingPickup> GetPendingPickups(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingPickup>("GetPendingPickups", locationIDParameter);
        }
    
        public virtual ObjectResult<PendingPickupWarehouse> GetPendingPickupWarehouses(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingPickupWarehouse>("GetPendingPickupWarehouses", locationIDParameter);
        }
    
        public virtual ObjectResult<string> BatchEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("BatchEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<BatchIndex> GetBatchIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> fillingLineID, Nullable<int> activeOption)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            var activeOptionParameter = activeOption.HasValue ?
                new ObjectParameter("ActiveOption", activeOption) :
                new ObjectParameter("ActiveOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BatchIndex>("GetBatchIndexes", aspUserIDParameter, fromDateParameter, toDateParameter, fillingLineIDParameter, activeOptionParameter);
        }
    
        public virtual int BatchCommonUpdate(Nullable<int> batchID, string nextPackNo, string nextCartonNo, string nextPalletNo)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var nextPackNoParameter = nextPackNo != null ?
                new ObjectParameter("NextPackNo", nextPackNo) :
                new ObjectParameter("NextPackNo", typeof(string));
    
            var nextCartonNoParameter = nextCartonNo != null ?
                new ObjectParameter("NextCartonNo", nextCartonNo) :
                new ObjectParameter("NextCartonNo", typeof(string));
    
            var nextPalletNoParameter = nextPalletNo != null ?
                new ObjectParameter("NextPalletNo", nextPalletNo) :
                new ObjectParameter("NextPalletNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BatchCommonUpdate", batchIDParameter, nextPackNoParameter, nextCartonNoParameter, nextPalletNoParameter);
        }
    
        public virtual ObjectResult<string> BatchPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("BatchPostSaveValidate", entityIDParameter);
        }
    
        public virtual ObjectResult<CommodityIndex> GetCommodityIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityIndex>("GetCommodityIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<CommodityBase> GetCommodityBases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityBase>("GetCommodityBases");
        }
    
        public virtual int BatchToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BatchToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual int BatchToggleVoid(Nullable<int> entityID, Nullable<bool> inActive, Nullable<int> voidTypeID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var inActiveParameter = inActive.HasValue ?
                new ObjectParameter("InActive", inActive) :
                new ObjectParameter("InActive", typeof(bool));
    
            var voidTypeIDParameter = voidTypeID.HasValue ?
                new ObjectParameter("VoidTypeID", voidTypeID) :
                new ObjectParameter("VoidTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BatchToggleVoid", entityIDParameter, inActiveParameter, voidTypeIDParameter);
        }
    
        public virtual ObjectResult<PickupIndex> GetPickupIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PickupIndex>("GetPickupIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<PickupViewDetail> GetPickupViewDetails(Nullable<int> pickupID)
        {
            var pickupIDParameter = pickupID.HasValue ?
                new ObjectParameter("PickupID", pickupID) :
                new ObjectParameter("PickupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PickupViewDetail>("GetPickupViewDetails", pickupIDParameter);
        }
    
        public virtual ObjectResult<string> PickupApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PickupApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> PickupEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PickupEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> PickupPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PickupPostSaveValidate", entityIDParameter);
        }
    
        public virtual int PickupSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PickupSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int PickupToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PickupToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<PendingPallet> GetPendingPallets(Nullable<int> locationID, Nullable<int> fillingLineID, Nullable<int> pickupID, string palletIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            var pickupIDParameter = pickupID.HasValue ?
                new ObjectParameter("PickupID", pickupID) :
                new ObjectParameter("PickupID", typeof(int));
    
            var palletIDsParameter = palletIDs != null ?
                new ObjectParameter("PalletIDs", palletIDs) :
                new ObjectParameter("PalletIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingPallet>("GetPendingPallets", locationIDParameter, fillingLineIDParameter, pickupIDParameter, palletIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<EmployeeBase> GetEmployeeBases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeBase>("GetEmployeeBases");
        }
    
        public virtual ObjectResult<WarehouseBase> GetWarehouseBases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseBase>("GetWarehouseBases");
        }
    
        public virtual ObjectResult<EmployeeIndex> GetEmployeeIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeIndex>("GetEmployeeIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<WarehouseIndex> GetWarehouseIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseIndex>("GetWarehouseIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<FillingLineBase> GetFillingLineBases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillingLineBase>("GetFillingLineBases");
        }
    
        public virtual ObjectResult<FillingLineIndex> GetFillingLineIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillingLineIndex>("GetFillingLineIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<BinLocationBase> GetBinLocationBases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BinLocationBase>("GetBinLocationBases");
        }
    
        public virtual ObjectResult<BinLocationIndex> GetBinLocationIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BinLocationIndex>("GetBinLocationIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<string> CartonEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CartonEditable", entityIDParameter);
        }
    
        public virtual int CartonSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption, string packIDs, Nullable<bool> deletePack)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            var packIDsParameter = packIDs != null ?
                new ObjectParameter("PackIDs", packIDs) :
                new ObjectParameter("PackIDs", typeof(string));
    
            var deletePackParameter = deletePack.HasValue ?
                new ObjectParameter("DeletePack", deletePack) :
                new ObjectParameter("DeletePack", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CartonSaveRelative", entityIDParameter, saveRelativeOptionParameter, packIDsParameter, deletePackParameter);
        }
    
        public virtual int CartonUpdateEntryStatus(string cartonIDs, Nullable<int> entryStatusID)
        {
            var cartonIDsParameter = cartonIDs != null ?
                new ObjectParameter("CartonIDs", cartonIDs) :
                new ObjectParameter("CartonIDs", typeof(string));
    
            var entryStatusIDParameter = entryStatusID.HasValue ?
                new ObjectParameter("EntryStatusID", entryStatusID) :
                new ObjectParameter("EntryStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CartonUpdateEntryStatus", cartonIDsParameter, entryStatusIDParameter);
        }
    
        public virtual ObjectResult<Carton> GetCartons(Nullable<int> fillingLineID, string entryStatusIDs, Nullable<int> palletID)
        {
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            var entryStatusIDsParameter = entryStatusIDs != null ?
                new ObjectParameter("EntryStatusIDs", entryStatusIDs) :
                new ObjectParameter("EntryStatusIDs", typeof(string));
    
            var palletIDParameter = palletID.HasValue ?
                new ObjectParameter("PalletID", palletID) :
                new ObjectParameter("PalletID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Carton>("GetCartons", fillingLineIDParameter, entryStatusIDsParameter, palletIDParameter);
        }
    
        public virtual ObjectResult<Carton> GetCartons(Nullable<int> fillingLineID, string entryStatusIDs, Nullable<int> palletID, MergeOption mergeOption)
        {
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            var entryStatusIDsParameter = entryStatusIDs != null ?
                new ObjectParameter("EntryStatusIDs", entryStatusIDs) :
                new ObjectParameter("EntryStatusIDs", typeof(string));
    
            var palletIDParameter = palletID.HasValue ?
                new ObjectParameter("PalletID", palletID) :
                new ObjectParameter("PalletID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Carton>("GetCartons", mergeOption, fillingLineIDParameter, entryStatusIDsParameter, palletIDParameter);
        }
    
        public virtual ObjectResult<Pack> GetPacks(Nullable<int> fillingLineID, string entryStatusIDs, Nullable<int> cartonID)
        {
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            var entryStatusIDsParameter = entryStatusIDs != null ?
                new ObjectParameter("EntryStatusIDs", entryStatusIDs) :
                new ObjectParameter("EntryStatusIDs", typeof(string));
    
            var cartonIDParameter = cartonID.HasValue ?
                new ObjectParameter("CartonID", cartonID) :
                new ObjectParameter("CartonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pack>("GetPacks", fillingLineIDParameter, entryStatusIDsParameter, cartonIDParameter);
        }
    
        public virtual ObjectResult<Pack> GetPacks(Nullable<int> fillingLineID, string entryStatusIDs, Nullable<int> cartonID, MergeOption mergeOption)
        {
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            var entryStatusIDsParameter = entryStatusIDs != null ?
                new ObjectParameter("EntryStatusIDs", entryStatusIDs) :
                new ObjectParameter("EntryStatusIDs", typeof(string));
    
            var cartonIDParameter = cartonID.HasValue ?
                new ObjectParameter("CartonID", cartonID) :
                new ObjectParameter("CartonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pack>("GetPacks", mergeOption, fillingLineIDParameter, entryStatusIDsParameter, cartonIDParameter);
        }
    
        public virtual ObjectResult<Pallet> GetPallets(Nullable<int> fillingLineID, Nullable<int> batchID, string entryStatusIDs)
        {
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var entryStatusIDsParameter = entryStatusIDs != null ?
                new ObjectParameter("EntryStatusIDs", entryStatusIDs) :
                new ObjectParameter("EntryStatusIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pallet>("GetPallets", fillingLineIDParameter, batchIDParameter, entryStatusIDsParameter);
        }
    
        public virtual ObjectResult<Pallet> GetPallets(Nullable<int> fillingLineID, Nullable<int> batchID, string entryStatusIDs, MergeOption mergeOption)
        {
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var entryStatusIDsParameter = entryStatusIDs != null ?
                new ObjectParameter("EntryStatusIDs", entryStatusIDs) :
                new ObjectParameter("EntryStatusIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pallet>("GetPallets", mergeOption, fillingLineIDParameter, batchIDParameter, entryStatusIDsParameter);
        }
    
        public virtual ObjectResult<string> PackEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PackEditable", entityIDParameter);
        }
    
        public virtual int PackUpdateEntryStatus(string packIDs, Nullable<int> entryStatusID)
        {
            var packIDsParameter = packIDs != null ?
                new ObjectParameter("PackIDs", packIDs) :
                new ObjectParameter("PackIDs", typeof(string));
    
            var entryStatusIDParameter = entryStatusID.HasValue ?
                new ObjectParameter("EntryStatusID", entryStatusID) :
                new ObjectParameter("EntryStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PackUpdateEntryStatus", packIDsParameter, entryStatusIDParameter);
        }
    
        public virtual int PackUpdateQueueID(string packIDs, Nullable<int> queueID)
        {
            var packIDsParameter = packIDs != null ?
                new ObjectParameter("PackIDs", packIDs) :
                new ObjectParameter("PackIDs", typeof(string));
    
            var queueIDParameter = queueID.HasValue ?
                new ObjectParameter("QueueID", queueID) :
                new ObjectParameter("QueueID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PackUpdateQueueID", packIDsParameter, queueIDParameter);
        }
    
        public virtual ObjectResult<string> PalletEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PalletEditable", entityIDParameter);
        }
    
        public virtual int PalletSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption, string cartonIDs)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            var cartonIDsParameter = cartonIDs != null ?
                new ObjectParameter("CartonIDs", cartonIDs) :
                new ObjectParameter("CartonIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PalletSaveRelative", entityIDParameter, saveRelativeOptionParameter, cartonIDsParameter);
        }
    
        public virtual int PalletUpdateEntryStatus(string palletIDs, Nullable<int> entryStatusID)
        {
            var palletIDsParameter = palletIDs != null ?
                new ObjectParameter("PalletIDs", palletIDs) :
                new ObjectParameter("PalletIDs", typeof(string));
    
            var entryStatusIDParameter = entryStatusID.HasValue ?
                new ObjectParameter("EntryStatusID", entryStatusID) :
                new ObjectParameter("EntryStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PalletUpdateEntryStatus", palletIDsParameter, entryStatusIDParameter);
        }
    
        public virtual ObjectResult<SalesOrderIndex> GetSalesOrderIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesOrderIndex>("GetSalesOrderIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SalesOrderViewDetail> GetSalesOrderViewDetails(Nullable<int> salesOrderID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesOrderViewDetail>("GetSalesOrderViewDetails", salesOrderIDParameter);
        }
    
        public virtual ObjectResult<string> SalesOrderApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SalesOrderApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> SalesOrderEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SalesOrderEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> SalesOrderPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SalesOrderPostSaveValidate", entityIDParameter);
        }
    
        public virtual int SalesOrderSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesOrderSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int SalesOrderToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesOrderToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<Commodity> SearchCommodities(Nullable<int> commodityID)
        {
            var commodityIDParameter = commodityID.HasValue ?
                new ObjectParameter("CommodityID", commodityID) :
                new ObjectParameter("CommodityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Commodity>("SearchCommodities", commodityIDParameter);
        }
    
        public virtual ObjectResult<Commodity> SearchCommodities(Nullable<int> commodityID, MergeOption mergeOption)
        {
            var commodityIDParameter = commodityID.HasValue ?
                new ObjectParameter("CommodityID", commodityID) :
                new ObjectParameter("CommodityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Commodity>("SearchCommodities", mergeOption, commodityIDParameter);
        }
    
        public virtual ObjectResult<CustomerBase> GetCustomerBases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerBase>("GetCustomerBases");
        }
    
        public virtual ObjectResult<CustomerIndex> GetCustomerIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerIndex>("GetCustomerIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<string> DeliveryAdviceApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeliveryAdviceApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> DeliveryAdviceEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeliveryAdviceEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> DeliveryAdvicePostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeliveryAdvicePostSaveValidate", entityIDParameter);
        }
    
        public virtual int DeliveryAdviceSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeliveryAdviceSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int DeliveryAdviceToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeliveryAdviceToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<DeliveryAdviceIndex> GetDeliveryAdviceIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveryAdviceIndex>("GetDeliveryAdviceIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<DeliveryAdviceViewDetail> GetDeliveryAdviceViewDetails(Nullable<int> deliveryAdviceID)
        {
            var deliveryAdviceIDParameter = deliveryAdviceID.HasValue ?
                new ObjectParameter("DeliveryAdviceID", deliveryAdviceID) :
                new ObjectParameter("DeliveryAdviceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveryAdviceViewDetail>("GetDeliveryAdviceViewDetails", deliveryAdviceIDParameter);
        }
    
        public virtual ObjectResult<PendingSalesOrderCustomer> GetPendingSalesOrderCustomers(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingSalesOrderCustomer>("GetPendingSalesOrderCustomers", locationIDParameter);
        }
    
        public virtual ObjectResult<PendingSalesOrderDetail> GetPendingSalesOrderDetails(Nullable<int> locationID, Nullable<int> deliveryAdviceID, Nullable<int> salesOrderID, Nullable<int> customerID, string salesOrderDetailIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var deliveryAdviceIDParameter = deliveryAdviceID.HasValue ?
                new ObjectParameter("DeliveryAdviceID", deliveryAdviceID) :
                new ObjectParameter("DeliveryAdviceID", typeof(int));
    
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var salesOrderDetailIDsParameter = salesOrderDetailIDs != null ?
                new ObjectParameter("SalesOrderDetailIDs", salesOrderDetailIDs) :
                new ObjectParameter("SalesOrderDetailIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingSalesOrderDetail>("GetPendingSalesOrderDetails", locationIDParameter, deliveryAdviceIDParameter, salesOrderIDParameter, customerIDParameter, salesOrderDetailIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<PendingSalesOrder> GetPendingSalesOrders(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingSalesOrder>("GetPendingSalesOrders", locationIDParameter);
        }
    
        public virtual ObjectResult<GoodsIssueIndex> GetGoodsIssueIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsIssueIndex>("GetGoodsIssueIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GoodsIssueViewDetail> GetGoodsIssueViewDetails(Nullable<int> goodsIssueID)
        {
            var goodsIssueIDParameter = goodsIssueID.HasValue ?
                new ObjectParameter("GoodsIssueID", goodsIssueID) :
                new ObjectParameter("GoodsIssueID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsIssueViewDetail>("GetGoodsIssueViewDetails", goodsIssueIDParameter);
        }
    
        public virtual ObjectResult<PendingDeliveryAdviceCustomer> GetPendingDeliveryAdviceCustomers(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingDeliveryAdviceCustomer>("GetPendingDeliveryAdviceCustomers", locationIDParameter);
        }
    
        public virtual ObjectResult<PendingDeliveryAdviceDetail> GetPendingDeliveryAdviceDetails(Nullable<int> locationID, Nullable<int> goodsIssueID, Nullable<int> deliveryAdviceID, Nullable<int> customerID, string deliveryAdviceDetailIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var goodsIssueIDParameter = goodsIssueID.HasValue ?
                new ObjectParameter("GoodsIssueID", goodsIssueID) :
                new ObjectParameter("GoodsIssueID", typeof(int));
    
            var deliveryAdviceIDParameter = deliveryAdviceID.HasValue ?
                new ObjectParameter("DeliveryAdviceID", deliveryAdviceID) :
                new ObjectParameter("DeliveryAdviceID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var deliveryAdviceDetailIDsParameter = deliveryAdviceDetailIDs != null ?
                new ObjectParameter("DeliveryAdviceDetailIDs", deliveryAdviceDetailIDs) :
                new ObjectParameter("DeliveryAdviceDetailIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingDeliveryAdviceDetail>("GetPendingDeliveryAdviceDetails", locationIDParameter, goodsIssueIDParameter, deliveryAdviceIDParameter, customerIDParameter, deliveryAdviceDetailIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<PendingDeliveryAdvice> GetPendingDeliveryAdvices(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingDeliveryAdvice>("GetPendingDeliveryAdvices", locationIDParameter);
        }
    
        public virtual ObjectResult<string> GoodsIssueApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GoodsIssueApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> GoodsIssueEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GoodsIssueEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> GoodsIssuePostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GoodsIssuePostSaveValidate", entityIDParameter);
        }
    
        public virtual int GoodsIssueSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GoodsIssueSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int GoodsIssueToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GoodsIssueToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<GoodsReceiptDetailAvailable> GetGoodsReceiptDetailAvailables(Nullable<int> locationID, Nullable<int> commodityID, string goodsReceiptDetailIDs)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var commodityIDParameter = commodityID.HasValue ?
                new ObjectParameter("CommodityID", commodityID) :
                new ObjectParameter("CommodityID", typeof(int));
    
            var goodsReceiptDetailIDsParameter = goodsReceiptDetailIDs != null ?
                new ObjectParameter("GoodsReceiptDetailIDs", goodsReceiptDetailIDs) :
                new ObjectParameter("GoodsReceiptDetailIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsReceiptDetailAvailable>("GetGoodsReceiptDetailAvailables", locationIDParameter, commodityIDParameter, goodsReceiptDetailIDsParameter);
        }
    
        public virtual ObjectResult<WarehouseAdjustmentIndex> GetWarehouseAdjustmentIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseAdjustmentIndex>("GetWarehouseAdjustmentIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<WarehouseAdjustmentViewDetail> GetWarehouseAdjustmentViewDetails(Nullable<int> warehouseAdjustmentID)
        {
            var warehouseAdjustmentIDParameter = warehouseAdjustmentID.HasValue ?
                new ObjectParameter("WarehouseAdjustmentID", warehouseAdjustmentID) :
                new ObjectParameter("WarehouseAdjustmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseAdjustmentViewDetail>("GetWarehouseAdjustmentViewDetails", warehouseAdjustmentIDParameter);
        }
    
        public virtual ObjectResult<string> WarehouseAdjustmentApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("WarehouseAdjustmentApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> WarehouseAdjustmentEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("WarehouseAdjustmentEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> WarehouseAdjustmentPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("WarehouseAdjustmentPostSaveValidate", entityIDParameter);
        }
    
        public virtual int WarehouseAdjustmentSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WarehouseAdjustmentSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int WarehouseAdjustmentToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WarehouseAdjustmentToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<WarehouseAdjustmentTypeBase> GetWarehouseAdjustmentTypeBases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseAdjustmentTypeBase>("GetWarehouseAdjustmentTypeBases");
        }
    
        public virtual ObjectResult<WarehouseAdjustmentTypeIndex> GetWarehouseAdjustmentTypeIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseAdjustmentTypeIndex>("GetWarehouseAdjustmentTypeIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetPalletChanged(Nullable<int> fillingLineID)
        {
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetPalletChanged", fillingLineIDParameter);
        }
    }
}
